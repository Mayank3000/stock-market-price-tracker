{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91993\\\\Desktop\\\\stock-market-tracker\\\\frontend\\\\src\\\\components\\\\StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StockChart({\n  stock\n}) {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    if (stock) {\n      // For demo purposes, we'll generate random data\n      // In a real app, you would fetch historical data from an API\n      generateMockChartData(stock);\n    }\n  }, [stock]);\n  const generateMockChartData = stock => {\n    const basePrice = parseFloat(stock.price);\n    const data = [];\n    const now = new Date();\n\n    // Generate data for the last 30 days\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n\n      // Random fluctuation within 5% of base price\n      const randomFactor = 0.95 + Math.random() * 0.1;\n      const dailyPrice = Math.round(basePrice * randomFactor * 100) / 100;\n      data.push({\n        date: date.toLocaleDateString('en-US', {\n          month: 'short',\n          day: 'numeric'\n        }),\n        price: dailyPrice\n      });\n    }\n    setChartData(data);\n  };\n  if (!stock) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-stock-selected\",\n      children: \"Select a stock to view chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  const price = parseFloat(stock.price);\n  const change = parseFloat(stock.change);\n  const isPositive = change > 0;\n  const isNeutral = change === 0;\n  const changeClass = isPositive ? 'positive' : isNeutral ? 'neutral' : 'negative';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-stock-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [stock.symbol, \" - \", stock.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-price-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chart-price\",\n            children: [\"$\", price.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `chart-change ${changeClass}`,\n            children: [isPositive ? '+' : '', change.toFixed(2), \" (\", stock.percent_change, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\",\n            padding: {\n              left: 30,\n              right: 30\n            },\n            tick: {\n              fontSize: 12\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            domain: ['auto', 'auto'],\n            tick: {\n              fontSize: 12\n            },\n            tickFormatter: value => `$${value}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [`$${value}`, 'Price'],\n            labelFormatter: label => `Date: ${label}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"price\",\n            stroke: isPositive ? \"#0ecb81\" : \"#f6465d\",\n            strokeWidth: 2,\n            dot: false,\n            activeDot: {\n              r: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(StockChart, \"Leo9Xk/Ki5G6SkYc3yZESo07mWw=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","StockChart","stock","_s","chartData","setChartData","generateMockChartData","basePrice","parseFloat","price","data","now","Date","i","date","setDate","getDate","randomFactor","Math","random","dailyPrice","round","push","toLocaleDateString","month","day","className","children","fileName","_jsxFileName","lineNumber","columnNumber","change","isPositive","isNeutral","changeClass","symbol","name","toFixed","percent_change","width","height","strokeDasharray","dataKey","padding","left","right","tick","fontSize","domain","tickFormatter","value","formatter","labelFormatter","label","type","stroke","strokeWidth","dot","activeDot","r","_c","$RefreshReg$"],"sources":["C:/Users/91993/Desktop/stock-market-tracker/frontend/src/components/StockChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\n\r\nfunction StockChart({ stock }) {\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (stock) {\r\n      // For demo purposes, we'll generate random data\r\n      // In a real app, you would fetch historical data from an API\r\n      generateMockChartData(stock);\r\n    }\r\n  }, [stock]);\r\n\r\n  const generateMockChartData = (stock) => {\r\n    const basePrice = parseFloat(stock.price);\r\n    const data = [];\r\n    const now = new Date();\r\n    \r\n    // Generate data for the last 30 days\r\n    for (let i = 30; i >= 0; i--) {\r\n      const date = new Date(now);\r\n      date.setDate(date.getDate() - i);\r\n      \r\n      // Random fluctuation within 5% of base price\r\n      const randomFactor = 0.95 + Math.random() * 0.1;\r\n      const dailyPrice = Math.round(basePrice * randomFactor * 100) / 100;\r\n      \r\n      data.push({\r\n        date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n        price: dailyPrice\r\n      });\r\n    }\r\n    \r\n    setChartData(data);\r\n  };\r\n\r\n  if (!stock) {\r\n    return <div className=\"no-stock-selected\">Select a stock to view chart</div>;\r\n  }\r\n\r\n  const price = parseFloat(stock.price);\r\n  const change = parseFloat(stock.change);\r\n  const isPositive = change > 0;\r\n  const isNeutral = change === 0;\r\n  const changeClass = isPositive ? 'positive' : isNeutral ? 'neutral' : 'negative';\r\n\r\n  return (\r\n    <div className=\"stock-chart\">\r\n      <div className=\"chart-header\">\r\n        <div className=\"chart-stock-info\">\r\n          <h2>{stock.symbol} - {stock.name}</h2>\r\n          <div className=\"chart-price-info\">\r\n            <span className=\"chart-price\">${price.toFixed(2)}</span>\r\n            <span className={`chart-change ${changeClass}`}>\r\n              {isPositive ? '+' : ''}{change.toFixed(2)} ({stock.percent_change})\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"chart-wrapper\">\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n          <LineChart data={chartData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis \r\n              dataKey=\"date\" \r\n              padding={{ left: 30, right: 30 }}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <YAxis \r\n              domain={['auto', 'auto']}\r\n              tick={{ fontSize: 12 }}\r\n              tickFormatter={(value) => `$${value}`}\r\n            />\r\n            <Tooltip \r\n              formatter={(value) => [`$${value}`, 'Price']}\r\n              labelFormatter={(label) => `Date: ${label}`}\r\n            />\r\n            <Line \r\n              type=\"monotone\" \r\n              dataKey=\"price\" \r\n              stroke={isPositive ? \"#0ecb81\" : \"#f6465d\"} \r\n              strokeWidth={2}\r\n              dot={false}\r\n              activeDot={{ r: 8 }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StockChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}